---
output: 
  github_document:
    toc: TRUE

---



<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```



# Part 0. Readme as usual

# Introducing the {ggwedge} package! ðŸ¦„ (typical package write up; but actually aspirational)

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
<!-- badges: end -->


The goal of {ggwedge} is to build those pie charts without the hastle.


To install the dev version use the following:

```
remotes::install_github("owner/repo") # 
```  
  
## Example  ðŸ¦„ (Aspirational; describes target API)

Try in an interactive session:  ðŸ¦„ ðŸ¦„ ðŸ¦„ 

```{r, eval = F}
library(ggplot2)
library(ggwedge)
ggplot(diamonds) + 
  aes(fill = cut) + 
  geom_wedge() # for use with cartesian coords

last_plot() + 
  plot_wedge()

ggplot(diamonds) + 
  aes(fill = cut) + 
  geom_pie() + # more true to our pie...
  coords_polar()
```



# Part I. Work out functionality  âœ… 

```{r compute_panel_pie, error=TRUE}
compute_panel_pie <- function(data, scales, digits = 1, r_nudge = 0, r_prop = 1){
  
  if(!("weight" %in% names(data))){data$weight <- 1}
  # order matters... Need to add text aesthetics
  if("fill" %in% names(data)){data <- group_by(data, fill, .add = T)}
  if("alpha" %in% names(data)){data <- group_by(data, alpha, .add = T)}
  if("colour" %in% names(data)){data <- group_by(data, colour, .add = T)}
  if("group" %in% names(data)){data <- group_by(data, group, .add = T)}
  if("linetype" %in% names(data)){data <- group_by(data, linetype, .add = T)}
  if("linewidth" %in% names(data)){data <- group_by(data, linewidth, .add = T)}
  
out <- data %>% 
  summarize(count = sum(weight)) %>% 
  ungroup() %>% 
  mutate(group = 1:n()) %>% 
  mutate(cum_n = cumsum(.data$count)) %>% 
  mutate(xmax = .data$cum_n/sum(.data$count)) %>% 
  mutate(xmin = lag(.data$xmax)) %>% 
  mutate(xmin = replace_na(.data$xmin, 0)) %>% 
  mutate(r = sqrt(sum(.data$count)/pi)) %>% 
  mutate(r0 = 0) %>% 
  mutate(ymin = 0, 
         ymax = .data$r) %>% 
  mutate(y = 0) # always see zero, donuts.


  if("r" %in% names(data)){out$ymax <- data$r[1]}
  if("r" %in% names(data)){out$r <- data$r[1]}
  if("r0" %in% names(data)){out$ymin <- data$r0[1]}
  # idea that didn't work and I don't know why
  # since rect doesn't use x and y (but xmin xmax etc) this is not as interesting
  # but it seems like a nice unified strategy for supercharging compute functions to do
  # some nice labeling comput for us...  But, not working! Why?
  # if(is_label){out$y <- out$y_text}   

# routine for labels; we do this after r's overridden because y is computed based on this...
out <- out %>% 
  mutate(prop = .data$count/sum(.data$count)) %>% 
  mutate(percent = paste0(round(100*.data$prop, digits), "%")) %>% 
  mutate(r_prop = r_prop) %>% 
  mutate(r_nudge = r_nudge) %>% 
  mutate(x = (.data$xmin + .data$xmax)/2) %>% 
  mutate(y_text = .data$r*.data$r_prop + .data$r_nudge)

  out
  
}


# compute_panel_pietext <- function(...){
#   
#   compute_panel_pie(..., is_label = T) # overwriting y
#   
#   
# }


```

```{r}
library(tidyverse)
ggplot2::diamonds |> 
  mutate(fill = cut) |> 
  mutate(r = 1) |> 
  mutate(r0 = .5) |> 
  compute_panel_pie(r_nudge = 2)
```


```{r geom_pie}
StatPie <- ggplot2::ggproto(`_class` = "StatPie",
                  `_inherit` = ggplot2::Stat,
                  compute_panel = compute_panel_pie,
                  default_aes = ggplot2::aes(
                    group = ggplot2::after_stat(group))#,
                    # label = ggplot2::after_stat(percent),
                    # y = ggplot2::after_stat(r*r_prop + r_nudge))
                  )

StatPietext <- ggplot2::ggproto(`_class` = "StatPietext",
                  `_inherit` = ggplot2::Stat,
                  compute_panel = compute_panel_pie,
                  default_aes = ggplot2::aes(
                    group = ggplot2::after_stat(group),
                    label = ggplot2::after_stat(percent),
                    y = ggplot2::after_stat(r*r_prop + r_nudge))
                  )


geom_pie <- function(
  mapping = NULL,
  data = NULL,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE, ...) {
  ggplot2::layer(
    stat = StatPie,  # proto object from step 2
    geom = ggplot2::GeomRect,  # inherit other behavior
    data = data,
    mapping = mapping,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}

geom_pie_label <- function(
  mapping = NULL,
  data = NULL,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE, ...) {
  ggplot2::layer(
    stat = StatPietext,  # proto object from step 2
    geom = ggplot2::GeomText,  # inherit other behavior
    data = data,
    mapping = mapping,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}
```

```{r}
Titanic %>% 
  data.frame() %>% 
  uncount(weights = Freq) ->
titanic

titanic %>% 
  ggplot() + 
  geom_pie() + 
  coord_polar() + # pie1
  aes(fill = Survived) + # pie2
  scale_fill_manual(values = c("darkgrey", "cadetblue")) + # custom colors
  facet_wrap(facets = vars(Sex)) + #pie3 
  theme_void() + # little clean up
  aes(r = 1) + #pie4
  aes(r0 = .6) + #pie5
  geom_pie_label(r_nudge = .2) + #pie6
  facet_grid(rows = vars(Sex), cols = vars(Class)) + #pie7
  aes(label = after_stat(count)) + #pie8 + 
  aes(alpha = Age) + scale_alpha_discrete(range = c(.6,1)) + #pie9
  aes(label = after_stat(percent)) # bonuspie, back to percentages
```



# Try it out

```{r}
ggplot2::diamonds %>% 
  ggplot() + 
  aes(fill = color) + 
  geom_pie() + 
  coord_polar()

ggplot2::diamonds %>% 
  ggplot() + 
  aes(fill = color) + 
  geom_pie() + 
  geom_pie_label(r_prop = .7) +
  coord_polar() +
  NULL

last_plot() + 
  facet_wrap(~cut)

last_plot() + 
  aes(alpha = color)

last_plot() + 
  aes(alpha = NULL) + 
  aes(r = 1)

ggplot2::diamonds %>% 
  count(cut) %>% 
  ggplot() + 
  aes(fill = cut, weight = n) + 
  geom_pie() +
  coord_polar()

last_plot() + 
  geom_pie_label(aes(label = after_stat(count), 
                     angle = after_stat(c(85,0,0,0,0))),
                r_prop = .7, 
                color = "oldlace")
```

# Part II. Packaging and documentation  ðŸš§ âœ… 

## Phase 1. Minimal working package

### Created files for package archetecture with `devtools::create(".")` âœ… 

### Moved functions R folder? âœ…  

```{r}
knitr::knit_code$get() |> names()
```

Use new {readme2pkg} function to do this from readme...

```{r, eval = T}
readme2pkg::chunk_to_r("geom_pie")
readme2pkg::chunk_to_r("compute_panel_pie")
```



### Added roxygen skeleton? âœ… 

Use a roxygen skeleton for auto documentation and making sure proposed functions are *exported*.

### Managed dependencies ? âœ… 

Package dependencies managed, i.e. `depend::function()` in proposed functions and declared in the DESCRIPTION

```{r}
usethis::use_package("ggplot2")
```



### Chosen a license? âœ… 


```{r}
usethis::use_mit_license()
```

### Run `devtools::check()` and addressed errors? âœ… 

```{r, results='hide', error=T}
devtools::check(pkg = ".")
```

### Build package ðŸš§ 

```{r}
devtools::build()
```

You need to do this before Part 0 in this document will work.

### Make aspirational part of readme real. ðŸš§ 

At this point, you could change eval chunk options to TRUE. You can remove  the ðŸ¦„ emoji and perhaps replace it with construction site if you are still uncertain of the API, and want to highlight that it is subject to change. 

### Add lifecycle badge (experimental)

```{r}
usethis::use_lifecycle_badge("experimental")
```


## Phase 2: Listen & iterate ðŸš§ 

Try to get feedback from experts on API, implementation, default decisions.  Is there already work that solves this problem? 


## Phase 3: Let things settle

### Settle on examples.  Put them in the roxygen skeleton and readme. ðŸš§ 

### Written formal tests of functions? ðŸš§ 


That would look like this...

```{r test_calc_frequency_works}
library(testthat)

test_that("calc frequency works", {
  expect_equal(440, 440)
  expect_equal(220*1, 220)
  
})
```


```{r, eval = F}
readme2pkg::chunk_to_tests_testthat("test_calc_frequency_works")
```


### Have you worked added a description and author information in the DESCRIPTION file? ðŸš§ 

### Addressed *all* notes, warnings and errors. ðŸš§ 

## Promote to wider audience...

### Package website built? ðŸš§ 

### Package website deployed? ðŸš§ 

## Phase 3: Harden/commit

### Submit to CRAN? Or don't.  ðŸš§ 

# Appendix: Reports, Environment

## Description file extract

```{r}

```

## Environment

Here I just want to print the packages and the versions

```{r}
all <- sessionInfo() |> print() |> capture.output()
all[11:17]
```

## `devtools::check()` report

```{r, error = T, results="hide", warning=F}
devtools::check(pkg = ".")
```




